!function(o){"use strict";o(document).ready(function(){function a(){o("#button-id").click(function(a){a.preventDefault();o(this);if(!0===confirm("Are you sure you want to do that?")){o("");o.ajax({method:"POST",url:plugin_abbrev_public_ajax_data.ajax_url,data:{action:"action_name",ajax_nonce:data_package_name.module_ajax_data_nonce,data_1:"Your data here.",data_2:"Your data here, too."},beforeSend:function(){var a=o("#outer-frame-id").height();o("#outer-frame-id").height(a),o("#frame-id").fadeOut("fast")},success:function(a,e,t){o("#frame-id").html(a),o("#frame-id").fadeIn("fast"),o("#outer-frame-id").css("height","auto"),o(document.body).trigger("post-load")}})}})}console.log("Module-Ajax's view-name.js loaded."),a(),o(document.body).on("post-load",function(){a()})})}(jQuery),function(a){"use strict";jQuery(document).ready(function(){console.log("Module's view-name.js loaded.")})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS1hamF4L2pzL3ZpZXctbmFtZS5qcyIsIm1vZHVsZS9qcy92aWV3LW5hbWUuanMiXSwibmFtZXMiOlsiJCIsImRvY3VtZW50IiwicmVhZHkiLCJiaW5kSGFuZGxlciIsImNsaWNrIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInRoaXMiLCJjb25maXJtIiwiYWpheCIsIm1ldGhvZCIsInVybCIsInBsdWdpbl9hYmJyZXZfcHVibGljX2FqYXhfZGF0YSIsImFqYXhfdXJsIiwiZGF0YSIsImFjdGlvbiIsImFqYXhfbm9uY2UiLCJkYXRhX3BhY2thZ2VfbmFtZSIsIm1vZHVsZV9hamF4X2RhdGFfbm9uY2UiLCJkYXRhXzEiLCJkYXRhXzIiLCJiZWZvcmVTZW5kIiwicmVnSGVpZ2h0IiwiaGVpZ2h0IiwiZmFkZU91dCIsInN1Y2Nlc3MiLCJodG1sIiwic3RhdHVzIiwianFYSFIiLCJmYWRlSW4iLCJjc3MiLCJib2R5IiwidHJpZ2dlciIsImNvbnNvbGUiLCJsb2ciLCJvbiIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkNBU0EsU0FBQUEsR0FFQSxhQUVBQSxFQUFBQyxVQUFBQyxNQUFBLFdBZ0JBLFNBQUFDLElBQ0FILEVBQUEsY0FBQUksTUFBQSxTQUFBQyxHQUVBQSxFQUFBQyxpQkFFQU4sRUFBQU8sTUFNQSxJQUFBLElBRkFDLFFBQUEscUNBRUEsQ0FLQVIsRUFBQSxJQWVBQSxFQUFBUyxLQUFBLENBQ0FDLE9BQUEsT0FDQUMsSUFBQUMsK0JBQUFDLFNBQ0FDLEtBQ0EsQ0FDQUMsT0FBQSxjQUNBQyxXQUFBQyxrQkFBQUMsdUJBQ0FDLE9BQUEsa0JBQ0FDLE9BQUEsd0JBR0FDLFdBQUEsV0FHQSxJQUFBQyxFQUFBdEIsRUFBQSxtQkFBQXVCLFNBR0F2QixFQUFBLG1CQUFBdUIsT0FBQUQsR0FHQXRCLEVBQUEsYUFBQXdCLFFBQUEsU0FJQUMsUUFBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQU1BNUIsRUFBQSxhQUFBMEIsS0FBQUEsR0FDQTFCLEVBQUEsYUFBQTZCLE9BQUEsUUFHQTdCLEVBQUEsbUJBQUE4QixJQUFBLFNBQUEsUUFHQTlCLEVBQUFDLFNBQUE4QixNQUFBQyxRQUFBLG1CQWxGQUMsUUFBQUMsSUFBQSxzQ0FLQS9CLElBR0FILEVBQUFDLFNBQUE4QixNQUFBSSxHQUFBLFlBQUEsV0FDQWhDLFFBZkEsQ0FpR0FpQyxRQ2hHQSxTQUFBcEMsR0FDQSxhQVNBb0MsT0FQQW5DLFVBQUFDLE1BQUEsV0FDQStCLFFBQUFDLElBQUEsbUNBSkEiLCJmaWxlIjoicHVibGljLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBKUyBmb3I6IHB1YmxpYy9tb2R1bGUtYWpheC92aWV3cy92aWV3LW5hbWUucGhwLlxyXG4gKlxyXG4gKiBAbGluayAgICAgICBodHRwOi8vZXhhbXBsZS5jb21cclxuICogQHNpbmNlICAgICAgMS4wLjBcclxuICpcclxuICogQHBhY2thZ2UgICAgcGx1Z2luLW5hbWVcclxuICogQHN1YnBhY2thZ2UgcGx1Z2luLW5hbWUvcHVibGljL21vZHVsZS1hamF4L2pzXHJcbiAqL1xyXG4oIGZ1bmN0aW9uKCQpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgJCggZG9jdW1lbnQgKS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCBcIk1vZHVsZS1BamF4J3Mgdmlldy1uYW1lLmpzIGxvYWRlZC5cIiApO1xyXG5cclxuICAgICAgICAvLyBEbyB0aGUgdGhpbmcuXHJcblxyXG4gICAgICAgIC8vIEJpbmQgdGhlIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGRlbGV0ZSBidXR0b246XHJcbiAgICAgICAgYmluZEhhbmRsZXIoKTtcclxuXHJcbiAgICAgICAgLy8gUmViaW5kIGFsbCBoYW5kbGVycyBvbiBBamF4IGZpbmlzaDpcclxuICAgICAgICAkKCBkb2N1bWVudC5ib2R5ICkub24oICdwb3N0LWxvYWQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgYmluZEhhbmRsZXIoKTtcclxuICAgICAgICB9ICk7XHJcblxyXG5cclxuICAgICAgICAvLyBIYW5kbGVyLWJpbmRlciBmb3IgYSBidXR0b246XHJcbiAgICAgICAgZnVuY3Rpb24gYmluZEhhbmRsZXIoKSB7XHJcbiAgICAgICAgICAgICQoICcjYnV0dG9uLWlkJyApLmNsaWNrKCBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSAkKCB0aGlzICk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2VsZWN0IHRoZSBodG1sIHlvdSBuZWVkIG9uIGV2ZW50IGhlcmUuXHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpcm1lZCA9IGNvbmZpcm0oIFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRvIHRoYXQ/XCIgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGNvbmZpcm1lZCA9PT0gdHJ1ZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyggXCJDbGljayBjb25maXJtZWQuXCIgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VsZWN0IGh0bWwgdG8gcGFzcyB0byB0aGUgQUpBWCBjYWxsYmFjayBoZXJlLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhamF4SW5wdXQgPSAkKCBcIlwiICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIEFqYXggY2FsbDpcclxuICAgICAgICAgICAgICAgICAgICBhamF4RnVuY3Rpb24oIGFqYXhJbnB1dCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCBcImFqYXhJbnB1dCBpcyBcIiArIGFqYXhJbnB1dCArIFwiLlwiICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IC8vIEVORCBPRjogYmluZEhhbmRsZXIoKS5cclxuXHJcblxyXG4gICAgICAgIC8vIERlZmluZSBhbiBhamF4IGZ1bmN0aW9uOlxyXG4gICAgICAgIGZ1bmN0aW9uIGFqYXhGdW5jdGlvbiggYWpheElucHV0ICkge1xyXG5cclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiBwbHVnaW5fYWJicmV2X3B1YmxpY19hamF4X2RhdGEuYWpheF91cmwsIC8vIEdyYWIgdGhlIHVybCBmcm9tIHRoZSBQSFAgYWpheCBkYXRhIG9iamVjdC5cclxuICAgICAgICAgICAgICAgIGRhdGE6XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2FjdGlvbl9uYW1lJywgIC8vIFNhbWUgYXMgaW4gd3BfYWpheF97YWN0aW9uX25hbWV9KCkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFqYXhfbm9uY2U6IGRhdGFfcGFja2FnZV9uYW1lLm1vZHVsZV9hamF4X2RhdGFfbm9uY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFfMTogXCJZb3VyIGRhdGEgaGVyZS5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YV8yOiBcIllvdXIgZGF0YSBoZXJlLCB0b28uXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBoZWlnaHQgb2YgI2N1cnJlbnQtdXNlci1yZWdpc3RyYXRpb24taW5mby5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVnSGVpZ2h0ID0gJCggJyNvdXRlci1mcmFtZS1pZCcgKS5oZWlnaHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBDU1MgaGVpZ2h0IHRvIHRoYXQgdmFsdWUgdG8gcHJlc2VydmUgZWxlbWVudCBwb3NpdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAkKCAnI291dGVyLWZyYW1lLWlkJyApLmhlaWdodCggcmVnSGVpZ2h0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXR0eSBmYWRlIG91dC5cclxuICAgICAgICAgICAgICAgICAgICAkKCAnI2ZyYW1lLWlkJyApLmZhZGVPdXQoICdmYXN0JyApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oIGh0bWwsIHN0YXR1cywganFYSFIgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coIFwiQUpBWCByZXR1cm5lZCBIVE1MIG9mOiBcIiArIGh0bWwgKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCBcIkFKQVggcmV0dXJuZWQgYSBzdGF0dXMgb2Y6IFwiICsgc3RhdHVzICsgXCIuXCIgKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCBcIkFKQVggcmV0dXJuZWQgYSBqcVhIUiBvYmplY3Qgb2Y6IFwiICsganFYSFIgKyBcIi5cIiApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKCAnI2ZyYW1lLWlkJyApLmh0bWwoIGh0bWwgKTsgLy8gVXNlIHRoZSBBSkFYIHJldHVybiB2YWx1ZSBhcyB0aGUgSFRNTCBjb250ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgJCggJyNmcmFtZS1pZCcgKS5mYWRlSW4oICdmYXN0JyApOyAvLyBQcmV0dHkgZmFkZSBpbi5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IENTUyBoZWlnaHQgb2YgI2N1cnJlbnQtdXNlci1yZWdpc3RyYXRpb24taW5mbyBiYWNrIHRvIGF1dG8uXHJcbiAgICAgICAgICAgICAgICAgICAgJCggJyNvdXRlci1mcmFtZS1pZCcgKS5jc3MoICdoZWlnaHQnLCAnYXV0bycgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RhbmRhcmQgZm9yIFdQIEFQSSwgYW5kIGp1c3QgaGFuZHk6XHJcbiAgICAgICAgICAgICAgICAgICAgJCggZG9jdW1lbnQuYm9keSApLnRyaWdnZXIoICdwb3N0LWxvYWQnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTsgLy8gRU5EIE9GOiAkLmFqYXgoKS5cclxuXHJcbiAgICAgICAgfSAvLyBFTkQgT0Y6IGFqYXhGdW5jdGlvbigpLlxyXG5cclxuICAgIH0pOyAvLyBFTkQgT0Y6ICQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cclxufSkoalF1ZXJ5KTtcclxuIiwiLyoqXHJcbiAqIEpTIGZvcjogcHVibGljL21vZHVsZS92aWV3cy92aWV3LW5hbWUucGhwLlxyXG4gKlxyXG4gKiBAbGluayAgICAgICBodHRwOi8vZXhhbXBsZS5jb21cclxuICogQHNpbmNlICAgICAgMS4wLjBcclxuICpcclxuICogQHBhY2thZ2UgICAgcGx1Z2luLW5hbWVcclxuICogQHN1YnBhY2thZ2UgcGx1Z2luLW5hbWUvcHVibGljL21vZHVsZS9qc1xyXG4gKi9cclxuXHJcbihmdW5jdGlvbiggJCApIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG4gICAgJCggZG9jdW1lbnQgKS5yZWFkeSggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coIFwiTW9kdWxlJ3Mgdmlldy1uYW1lLmpzIGxvYWRlZC5cIiApO1xyXG5cclxuICAgICAgICAvLyBEbyB0aGUgdGhpbmcuXHJcblxyXG4gICAgfSk7XHJcblxyXG59KSggalF1ZXJ5ICk7XHJcbiJdfQ==
